

var homework = {};

/*
 1. Return the nth fibonacci number

 f(0) = 0
 f(1) = 1
 f(10) = 55
*/
homework.fibonacci = function(n){
	var a= 0;
	var b= 1; 
	var c= 1;
	for (var i =2; i <=n; i++){
		c = a + b; 
		a = b;
		b = c; 
	}
	return c; 	
};

/*
 2. Sort array of integers

 f([2,4,5,1,3,1]) = [1,1,2,3,4,5]

 Don't use the Array sort() method... that would be lame.
*/
homework.sort = function(array){
  var i = 0; 
  var j = 0;
  var temp = 0; 
  var a = array.length;
  
  for(i;i<a-1;i++){
		for (j=i;j<a;j++){
			if (array[i] > array[j]){
			temp = array[i];
			array[i] = array[j];
			array[j] = temp; 
			}
		}
	} 
	return array;	
};

/*
 3. Return the factorial of n

 f(0) = 1
 f(1) = 1
 f(3) = 6
*/
homework.factorial = function(n){
	if(n ===0){
	return 1; 
	} 
	return n * homework.factorial(n-1); 
};


/*
 4. Rotate left

 Given array, rotate left n times and return array

 f([1,2,3,4,5], 1) = [2,3,4,5,1]
 f([1,2,3,4,5], 6) = [2,3,4,5,1]
 f([1,2,3,4,5], 3) = [4,5,1,2,3]

*/
homework.rotateLeft = function(array, n) {
	n = n%array.length; 
	var newArray = array.slice(n);
	return newArray.concat(array.slice(0,n)) 
};


/*
 5. Balanced Brackets

 A bracket is any one of the following: (, ), {, }, [, or ]

 The following are balanced brackets:
    ()
    ()()
    (())
    ({[]})

 The following are NOT balanced brackets:
 (
 )
 (()
 ([)]

 Return true if balanced
 Return false if not balanced
*/
homework.balancedBrackets = function (bracketsString){

	var stack = []; 
	var brackets = {
	'(': ')',
    '[': ']',
	'{': '}'
	};
	for (var i = 0; i < bracketsString.length; i++) {
		if (bracketsString[i] === '(' || bracketsString[i] === '[' || bracketsString[i] === '{') {
			 stack.push(word[i]);
    } else {
      var last = stack.pop();
      if (bracketsString[i] !== brackets[last]) {
        return false;
      }
    }
  }
  if (stack.length !== 0) {
    return false;
  
  return true;
}; 

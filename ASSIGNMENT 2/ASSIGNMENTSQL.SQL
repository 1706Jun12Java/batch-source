/* 2.1  select */

select * from EMPLOYEE;
select * from EMPLOYEE where LASTNAME= 'King';
select * from EMPLOYEE where  REPORTSTO is NULL;


/* 2.2  order-by */

select * FROM ALBUM ORDER BY TITLE DESC;
select FIRSTNAME From CUSTOMER ORDER BY CITY ASC;

/* 2.3  insert-into */


INSERT INTO GENRE
VALUES ('26 ','KPOP');

INSERT INTO GENRE
VALUES ('27','Folklore');


INSERT INTO EMPLOYEE
(EMPLOYEEID,LASTNAME,FIRSTNAME,TITLE,REPORTSTO,BIRTHDATE,HIREDATE,ADDRESS,CITY,STATE,COUNTRY,POSTALCODE,PHONE,FAX,EMAIL)
VALUES
(9,'Wang','John', 'IT Staff',6 ,'01-JAN-84','05-JUL-07', 
'123 FAKE ST','Edmonton','AB' ,'Canada','T5k 2N1','+1 (780) 123-4567','+1 (780) 123-4568','john@chinookcorp.com');

INSERT INTO EMPLOYEE 
(EMPLOYEEID,LASTNAME,FIRSTNAME,TITLE,REPORTSTO,BIRTHDATE,HIREDATE,ADDRESS,CITY,STATE,COUNTRY,POSTALCODE,PHONE,FAX,EMAIL)
VALUES 
(10,'Watson','Craig','IT Staff',6,'06-May-99', '05-JUL-15' ,
'123 Bloom ST','Edmonton','AB','Canada','T5k 2N2','+1 (780) 456-2345','+1 (780) 456-1234','craig@chinookcorp.com');


INSERT INTO CUSTOMER 
(CUSTOMERID,FIRSTNAME,LASTNAME,COMPANY,ADDRESS,CITY,STATE,COUNTRY,POSTALCODE,PHONE,FAX,EMAIL,SUPPORTREPID)
VALUES 
(60,'Bob','Yoself','IT Staffing','456 Bloom ST','Edmonton','AB',
'Canada','T5k 2N3','+1 (781) 456-2345','+1 (781) 456-1234','Bobyo@hotmail.com',3);

INSERT INTO CUSTOMER 
(CUSTOMERID,FIRSTNAME,LASTNAME,COMPANY,ADDRESS,CITY,STATE,COUNTRY,POSTALCODE,PHONE,FAX,EMAIL,SUPPORTREPID)
VALUES 
(61,'Rachel','Koons','Koons Bakery','789 Bott ST','Edmonton','AB',
'Canada','T6k 2N3','+1 (781) 446-2945','+1 (781) 456-1534','KoonR@gmail.com',5);

/* 2.4 Update */


UPDATE Customer
SET FIRSTNAME='Robert', LASTNAME='Walter'
WHERE CustomerID=32;

UPDATE ARTIST
SET Name='CCR'
WHERE ARTISTID=76;

/* 2.5 Like */

SELECT * FROM INVOICE
where BILLINGADDRESS like 'T%';

/* 2.6  between */


SELECT * FROM INVOICE
WHERE TOTAL BETWEEN 10 AND 15;


SELECT * FROM EMPLOYEE
WHERE HIREDATE BETWEEN '01-JUN-03' AND '01-MAR-04';

/* 2.7  delete*/

ALTER TABLE INVOICE
  DROP CONSTRAINT FK_INVOICECUSTOMERID;
DELETE FROM CUSTOMER WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walter';

/* 3.1 Functions */
 

/* 3.2 */
CREATE OR REPLACE FUNCTION AVG_INVOICED 
RETURN NUMBER IS AVGTOL NUMBER;
BEGIN
    SELECT AVG(TOTAL) 
    INTO AVGTOL 
    FROM INVOICE;
    RETURN AVGTOL;
END;

BEGIN
    DBMS_OUTPUT.PUT_LINE(AVG_INVOICED);
END;

CREATE OR REPLACE FUNCTION MOSTEXP 
RETURN NUMBER IS MOSTEXPTRACK NUMBER;
BEGIN
    SELECT MAX(UNITPRICE) 
    INTO MOSTEXPTRACK 
    FROM TRACK T1;
    RETURN MOSTEXPTRACK;
END;
/
BEGIN
    DBMS_OUTPUT.PUT_LINE(MOSTEXP);
END;
/* 4 */
CREATE OR REPLACE PROCEDURE UPDATEEMPLOYEEINFO (EMPID IN NUMBER,ADDRESS1 IN VARCHAR2, 
CITY1 IN VARCHAR2, STATE1 IN VARCHAR2, COUNTRY1 IN VARCHAR2, POSTALCODE1 IN VARCHAR2, 
PHONE1 IN VARCHAR2, FAX1 IN VARCHAR2, EMAIL1 VARCHAR2)
IS
BEGIN
UPDATE EMPLOYEE
SET ADDRESS = ADDRESS1
WHERE EMPLOYEEID =EMPID;

UPDATE EMPLOYEE
SET CITY = CITY1
WHERE EMPLOYEEID =EMPID;

UPDATE EMPLOYEE
SET STATE = STATE1
WHERE EMPLOYEEID =EMPID;

UPDATE EMPLOYEE
SET COUNTRY = COUNTRY1
WHERE EMPLOYEEID =EMPID;

UPDATE EMPLOYEE
SET POSTALCODE= POSTALCODE1
WHERE EMPLOYEEID =EMPID;

UPDATE EMPLOYEE
SET PHONE=PHONE1
WHERE EMPLOYEEID =EMPID;

UPDATE EMPLOYEE
SET FAX = FAX1
WHERE EMPLOYEEID =EMPID;


UPDATE EMPLOYEE
SET EMAIL= EMAIL1
WHERE EMPLOYEEID =EMPID;
END;

BEGIN
UPDATEEMPLOYEEINFO(1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'SOB@GMAIL.COM');
END;
/* 4*/
CREATE OR REPLACE PROCEDURE FINDTHEMAN (EMPID IN NUMBER, S OUT SYS_REFCURSOR)
IS
EMPID NUMBER;
BEGIN
SELECT COUNT(*) FROM BEAR_BEEHIVE BB
  WHERE EMPLOYEE.EMPLOYEEID = EMPID;
  IF EPID >= 1 THEN
  OPEN S FOR
SELECT EMP1.FIRSTNAME, EMP1.LASTNAME  FROM EMPLOYEE EMP1
WHERE EMP1.EMPLOYEEID = (SELECT EMP2.REPORTSTO FROM EMPLOYEE EMP2 WHERE EMP2.EMPLOYEEID = E_ID);
ELSE
DBMS_OUTPUT.PUT_LINE('FAILED TO FIND THE MAN');
END IF;
END ;


/*5*/
CREATE OR REPLACE PROCEDURE REMOVE_INVOICE (IND IN NUMBER)
IS
BEGIN
IF IND >0  THEN
DELETE FROM INVOICELINE WHERE IND = INVOICEID;
DELETE FROM INVOICE WHERE IND = INVOICEID;
END IF;
END;

BEGIN
REMOVE_INVOICE(1);
END;

CREATE OR REPLACE PROCEDURE INSERT_ROW(CUSTOMERID NUMBER, FIRSTNAME VARCHAR2, LASTNAME VARCHAR2, COMPANY VARCHAR2,ADDRESS VARCHAR2,
CITY VARCHAR2,STATE VARCHAR2, COUNTRY VARCHAR2, POSTALCODE VARCHAR2, PHONE VARCHAR2, FAX VARCHAR2, EMAIL VARCHAR2, SUPPORTEPID NUMBER)
IS BEGIN
INSERT INTO CUSTOMER VALUES (61,'BOB','FLAT','FLATHEADS','123 FLAT ST', 'FLATSTATE','NY','USA','11111','+49 030 26550720', '+49 030 26550280',
'FLATBOB@GMAIL.COM',5);
END;
BEGIN
INSERT_ROW();
END;

/*6 */
CREATE OR REPLACE TRIGGER AFTER_INSERT
AFTER INSERT
   ON EMPLOYEE
BEGIN
DBMS_OUTPUT.PUT_LINE('NOT EVEN WORTH IT');
END;

BEGIN
  AFTER_INSERT;
END;

CREATE OR REPLACE TRIGGER AFTER_UPDATE
AFTER UPDATE
   ON EMPLOYEE
BEGIN 
DBMS_OUTPUT.PUT_LINE('ITS BEEN UPDATED.');
END;

CREATE OR REPLACE TRIGGER AFTER_DELETE
AFTER DELETE
   ON EMPLOYEE
BEGIN
DBMS_OUTPUT.PUT_LINE('OH ITS GONE.');
END;

/* 7 */
SELECT CUSTOMER.CUSTOMERID, CUSTOMER.FIRSTNAME,CUSTOMER.LASTNAME, INVOICE.INVOICEID
FROM CUSTOMER INNER JOIN INVOICE
ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;


SELECT CUSTOMER.CUSTOMERID, CUSTOMER.FIRSTNAME,CUSTOMER.LASTNAME, INVOICE.INVOICEID,INVOICE.TOTAL
FROM CUSTOMER FULL OUTER JOIN INVOICE
ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;

SELECT * 
FROM ALBUM 
CROSS JOIN ARTIST
ORDER BY ARTIST.NAME ASC;

SELECT *
FROM EMPLOYEE A, EMPLOYEE B
WHERE A.REPORTSTO <> B.REPORTSTO;
CREATE TABLE BANK_USER (
    USER_ID INTEGER PRIMARY KEY NOT NULL,
    USERNAME VARCHAR2(100) UNIQUE NOT NULL,
    PW VARCHAR2(100) NOT NULL,
    USER_TYPE INTEGER DEFAULT 0
);

CREATE TABLE BANK_ACCOUNT (
    AC_ID INTEGER PRIMARY KEY,
    USER_ID INTEGER REFERENCES BANK_USER(USER_ID) ON DELETE CASCADE,
    BAL NUMBER DEFAULT 0
);

CREATE TABLE TRANSACTIONS(
TRAN_ID INTEGER PRIMARY KEY NOT NULL,
AC_ID REFERENCES BANK_ACCOUNT(AC_ID) ON DELETE CASCADE,
TRAN_DATE DATE,
ACTION_TYPE VARCHAR(20),
BEFORE_BAL NUMBER DEFAULT 0,
AFTER_BAL NUMBER DEFAULT 0
);

DROP TABLE ACCOUNT_TRANSACTION;


CREATE SEQUENCE SQ_BANK_USER_PK
START WITH 1
INCREMENT BY 1;

CREATE SEQUENCE SQ_BANK_ACCOUNT_PK
START WITH 1
INCREMENT BY 1;

CREATE SEQUENCE SQ_TRANSACTIONS_PK
START WITH 1
INCREMENT BY 1;


DROP TABLE BANK_ACCOUNT;
DROP TABLE BANK_USER;

DROP SEQUENCE SQ_BANK_USER_PK;
DROP SEQUENCE SQ_BANK_ACCOUNT_PK;




CREATE OR REPLACE PROCEDURE SP_UPDATE_BANK_USER(U_ID IN NUMBER, U_NAME IN VARCHAR2, U_PW IN VARCHAR2, U_TYPE IN INTEGER)
IS
USER_EXISTS INTEGER;
BEGIN
    SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
    SELECT COUNT(*) INTO USER_EXISTS FROM BANK_USER WHERE USER_ID = U_ID;
    IF USER_EXISTS > 0 THEN
    UPDATE BANK_USER SET USERNAME=U_NAME, PW=U_PW, USER_TYPE=U_TYPE WHERE USER_ID=U_ID;
    ELSE
      DBMS_OUTPUT.PUT_LINE('FAILED TO UPDATE USER');
    END IF;
    COMMIT;
    EXCEPTION
    WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('FAILED TO UPDATE USER');
    ROLLBACK;
END;



CREATE OR REPLACE TRIGGER TR_INSERT_BANK_USER
BEFORE INSERT ON BANK_USER
FOR EACH ROW
BEGIN
  SELECT SQ_BANK_USER_PK.NEXTVAL INTO :NEW.USER_ID FROM DUAL;
END;



CREATE OR REPLACE TRIGGER TR_INSERT_TRANSACTIONS
BEFORE INSERT ON TRANSACTIONS
FOR EACH ROW
BEGIN
  SELECT SQ_TRANSACTIONS_PK.NEXTVAL INTO :NEW.TRAN_ID FROM DUAL;
END;



CREATE OR REPLACE TRIGGER TR_INSERT_BANK_ACCOUNT
BEFORE INSERT ON BANK_ACCOUNT
FOR EACH ROW
BEGIN
  SELECT SQ_BANK_ACCOUNT_PK.NEXTVAL INTO :NEW.AC_ID FROM DUAL;
END;



CREATE OR REPLACE TRIGGER TR_ADD_BANK_ACCOUNT
AFTER INSERT ON BANK_USER
FOR EACH ROW
BEGIN
INSERT INTO BANK_ACCOUNT (USER_ID, BAL) VALUES (:new.USER_ID, 0);
END;




CREATE OR REPLACE TRIGGER TR_UPDATE_BA_TRANS
AFTER UPDATE ON BANK_ACCOUNT
FOR EACH ROW
DECLARE
ACT VARCHAR2(20);
BEGIN
    IF :new.BAL<:old.BAL THEN
        ACT:= 'WITHDRAW';
    ELSE
        ACT:= 'DEPOSIT';
    END IF;
    INSERT INTO TRANSACTIONS (AC_ID, TRAN_DATE, ACTION_TYPE, BEFORE_BAL, AFTER_BAL) VALUES (:new.AC_ID, SYSDATE, ACT, :old.BAL, :new.BAL);
END;

ALTER TABLE BANK_ACCOUNT ADD CONSTRAINT CK_BANK_BAL CHECK (BAL>=0);


CREATE OR REPLACE TRIGGER TR_AFTER_BA
AFTER INSERT ON BANK_ACCOUNT
FOR EACH ROW
BEGIN
INSERT INTO TRANSACTIONS (AC_ID, TRAN_DATE, ACTION_TYPE, BEFORE_BAL, AFTER_BAL) VALUES (:new.AC_ID, SYSDATE, 'ACCOUNT CREATE', 0,0);
END;




INSERT INTO BANK_USER VALUES(1,'SUPERUSER','P4SSW0RD',1);
INSERT INTO BANK_USER (USERNAME, PW) VALUES('USER4','PASSWORD');



CREATE OR REPLACE PROCEDURE SP_DEPOSITE_BANK_ACCOUNT(ACC_ID IN NUMBER, AMOUNT IN NUMBER, STATUS OUT NUMBER)
IS
ACC_EXISTS NUMBER;
BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
SELECT COUNT(*) INTO ACC_EXISTS FROM BANK_ACCOUNT WHERE AC_ID = ACC_ID;
IF ACC_EXISTS>0 THEN
UPDATE BANK_ACCOUNT SET BAL = BAL+AMOUNT WHERE AC_ID = ACC_ID;
STATUS:=1;
ELSE
DBMS_OUTPUT.PUT_LINE('FAILED TO DEPOSITE');
END IF;
COMMIT;
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('FAILED TO DEPOSITE');
ROLLBACK;
END;

BEGIN
SP_DEPOSITE_BANK_ACCOUNT(15, 1000);
END;


CREATE OR REPLACE PROCEDURE SP_WITHDRAW_BANK_ACCOUNT(ACC_ID IN NUMBER, AMOUNT IN NUMBER,STATUS OUT NUMBER)
IS
BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
UPDATE BANK_ACCOUNT SET BAL = BAL-AMOUNT WHERE AC_ID = ACC_ID;
STATUS:=1;
COMMIT;
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('Not Enough Balance');
ROLLBACK;
END;


CREATE OR REPLACE PROCEDURE SP_DELETE_BANK_ACCOUNT(U_ID in number, ACC_ID IN NUMBER, STATUS OUT NUMBER)
IS
BAL_LEFT NUMBER;
BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
SELECT BAL INTO BAL_LEFT FROM BANK_ACCOUNT WHERE AC_ID=ACC_ID and USER_ID=U_ID;
IF BAL_LEFT=0 THEN
DELETE FROM BANK_ACCOUNT WHERE AC_ID=ACC_ID;
STATUS:=1;
ELSE
DBMS_OUTPUT.PUT_LINE('BAL NOT 0');
END IF;
COMMIT;
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('UNABLE TO DELETE ACCOUNT');
ROLLBACK;
END;

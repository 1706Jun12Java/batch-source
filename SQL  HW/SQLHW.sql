/* 2.1
*/
SELECT * FROM EMPLOYEE;
SELECT * FROM EMPLOYEE WHERE LASTNAME = 'King';
SELECT * FROM EMPLOYEE WHERE FIRSTNAME = 'Andrew' AND REPORTSTO IS NULL;

/* 2.2
*/
SELECT * FROM ALBUM ORDER BY TITLE;
SELECT FIRSTNAME FROM CUSTOMER ORDER BY CITY DESC;
SELECT FIRSTNAME,CITY FROM CUSTOMER ORDER BY CITY DESC;
SELECT * FROM GENRE;

/* 2.3
*/
INSERT INTO GENRE VALUES (26,'Dubstep');
INSERT INTO GENRE VALUES (27,'Drum and Bass');
INSERT INTO EMPLOYEE VALUES (9,'Memes','Dank', 'Meme Director', 1,'18-APR-95','02-JAN-17','123 S Columbus ave','Bronx', 'NY','USA','10466','+1 (516) 467-1394', '+1 (516) 467-1374','memelord@dank.com');
INSERT INTO EMPLOYEE VALUES (10,'Assistant','Dank', 'Meme Assistant', 1,'25-DEC-95','02-MAR-17','157 Secor ave','Bronx', 'NY','USA','10466','+1 (516) 156-9999', '+1 (516) 444-2000','gitgud@dank.com');
/* 2.4
*/
UPDATE CUSTOMER SET FIRSTNAME = 'Robert', LASTNAME = 'Walter' WHERE FIRSTNAME= 'Aaron' AND LASTNAME = 'Mitchell';
SELECT FIRSTNAME,LASTNAME FROM CUSTOMER WHERE FIRSTNAME = 'Robert';
UPDATE ARTIST SET "NAME" = 'CCR' WHERE "NAME" = 'Creedence Clearwater Revival';

/* 2.5
*/
SELECT * FROM INVOICE
WHERE BILLINGADDRESS LIKE 'T%';

/* 2.6
*/
SELECT * FROM INVOICE WHERE TOTAL BETWEEN 15 AND 20;
SELECT * FROM EMPLOYEE WHERE HIREDATE BETWEEN '01-JUN-03' AND '01-MAR-04';

/* 2.7
*/
DELETE FROM INVOICELINE WHERE INVOICELINE.INVOICEID IN (SELECT INVOICE.INVOICEID FROM INVOICE INNER JOIN CUSTOMER ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID WHERE CUSTOMER.FIRSTNAME = 'Robert' AND CUSTOMER.LASTNAME = 'Walter');
DELETE FROM INVOICE WHERE INVOICE.CUSTOMERID IN (SELECT CUSTOMER.CUSTOMERID FROM CUSTOMER WHERE CUSTOMER.FIRSTNAME = 'Robert' AND CUSTOMER.LASTNAME = 'Walter');
DELETE FROM CUSTOMER WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walter';

-- 3.1


CREATE OR REPLACE FUNCTION GET_CURRENT_TIME
RETURN TIMESTAMP WITH TIME ZONE
IS
BEGIN
RETURN CURRENT_TIMESTAMP;
END;

CREATE OR REPLACE FUNCTION GET_MEDIATYPE_LENGTH(X IN NUMBER)
RETURN NUMBER
IS Z NUMBER;
MEDIATYPE_EXISTS NUMBER;
M_NAME VARCHAR2(100);
BEGIN
SELECT COUNT(*) INTO MEDIATYPE_EXISTS FROM MEDIATYPE WHERE X = MEDIATYPEID;
IF   MEDIATYPE_EXISTS > 0 
THEN SELECT "NAME" INTO M_NAME FROM MEDIATYPE WHERE X = MEDIATYPEID;
Z := LENGTH (M_NAME);
ELSE Z:= -1;
END IF;
RETURN Z;
END;

DECLARE 
T_STAMP TIMESTAMP WITH TIME ZONE;
BEGIN
T_STAMP := GET_CURRENT_TIME();
DBMS_OUTPUT.PUT_LINE(T_STAMP);
END;

BEGIN
DBMS_OUTPUT.PUT_LINE('The length is: ' ||GET_MEDIATYPE_LENGTH(10));
END;

BEGIN
DBMS_OUTPUT.PUT_LINE('The length is: ' ||GET_MEDIATYPE_LENGTH(2));
END;
-- 3.2

CREATE OR REPLACE FUNCTION AVG_INVOICE
RETURN NUMBER
IS
Z NUMBER;
BEGIN
SELECT AVG(TOTAL) INTO Z FROM INVOICE;
RETURN Z;
END;

BEGIN
DBMS_OUTPUT.PUT_LINE('The average total in invoice is: ' ||AVG_INVOICE);
END;

--3.3

CREATE OR REPLACE FUNCTION AVG_PRICE
RETURN NUMBER
IS
Z NUMBER;
BEGIN
SELECT AVG(UNITPRICE) INTO Z FROM INVOICELINE;
RETURN Z;
END;

BEGIN
DBMS_OUTPUT.PUT_LINE('The average unitprice in invoiceline is: ' ||AVG_PRICE);
END;

--3.4
CREATE OR REPLACE PROCEDURE GET_EMPLOYEES_AFTER_1968
IS
CURSOR c1  IS SELECT * FROM EMPLOYEE WHERE BIRTHDATE > '31-DEC-68';
BEGIN
FOR EMPLOYEE_REC in c1
LOOP
DBMS_OUTPUT.PUT_LINE(EMPLOYEE_REC.FIRSTNAME || ' ' || EMPLOYEE_REC.LASTNAME);
END LOOP;
END;

BEGIN
GET_EMPLOYEES_AFTER_1968();
END;

--4.1
CREATE OR REPLACE PROCEDURE SELECT_ALL_NAMES
IS
CURSOR c1  IS SELECT * FROM EMPLOYEE;
BEGIN
FOR EMP IN c1
LOOP
DBMS_OUTPUT.PUT_LINE(EMP.FIRSTNAME||' '||EMP.LASTNAME);
END LOOP;
END;

BEGIN
SELECT_ALL_NAMES();
END;

--4.2
CREATE OR REPLACE PROCEDURE UPDATE_EMPLOYEE(E_ID IN NUMBER,F_NAME IN VARCHAR2, L_NAME IN VARCHAR2, B_DATE IN DATE, ADDRESS_R IN VARCHAR2, CITY_R IN VARCHAR2,STATE_R IN VARCHAR2, COUNTRY_R IN VARCHAR2, ZIP IN VARCHAR2,PHONE_R IN VARCHAR2,FAX_R IN VARCHAR2,EMAIL_R IN VARCHAR2)
IS
EMPLOYEE_EXISTS NUMBER;
BEGIN
SELECT COUNT(*) INTO EMPLOYEE_EXISTS FROM EMPLOYEE WHERE EMPLOYEEID = E_ID;
IF EMPLOYEE_EXISTS > 0
THEN UPDATE EMPLOYEE SET FIRSTNAME = F_NAME, LASTNAME = L_NAME,BIRTHDATE = B_DATE, ADDRESS = ADDRESS_R,CITY = CITY_R, "STATE" = STATE_R,COUNTRY = COUNTRY_R, POSTALCODE = ZIP, PHONE =  PHONE_R, FAX = FAX_R,EMAIL = EMAIL_R WHERE EMPLOYEEID = E_ID;
DBMS_OUTPUT.PUT_LINE('Information Updated');
ELSE DBMS_OUTPUT.PUT_LINE('No Employee found');
end IF;
END;

BEGIN
UPDATE_EMPLOYEE(12,'Assistant','Dank','25-DEC-95','157 Secor ave','Bronx', 'NY','USA','10466','+1 (516) 156-9999', '+1 (516) 444-2000','gitgud@dank.com');
END;

BEGIN
UPDATE_EMPLOYEE(10,'Assassin','Dank','25-DEC-95','157 Secor ave','Bronx', 'NY','USA','10466','+1 (516) 156-9999', '+1 (516) 444-2000','gitgud@dank.com');
END;

SELECT * FROM EMPLOYEE WHERE LASTNAME = 'Dank';

CREATE OR REPLACE PROCEDURE GET_MANAGERS_OF_EMPLOYEES(E_ID IN NUMBER)
IS
EMPLOYEE_EXISTS NUMBER;
MANAGER_ID NUMBER;
MANAGER_FNAME VARCHAR2(100);
MANAGER_LNAME VARCHAR2(100);
BEGIN
SELECT COUNT(*) INTO EMPLOYEE_EXISTS FROM EMPLOYEE WHERE EMPLOYEEID = E_ID;
IF EMPLOYEE_EXISTS > 0
THEN SELECT REPORTSTO INTO MANAGER_ID FROM EMPLOYEE WHERE E_ID = EMPLOYEEID;
     SELECT FIRSTNAME INTO MANAGER_FNAME FROM EMPLOYEE WHERE MANAGER_ID = EMPLOYEEID;
     SELECT LASTNAME INTO MANAGER_LNAME FROM EMPLOYEE WHERE MANAGER_ID = EMPLOYEEID;
     DBMS_OUTPUT.PUT_LINE('This Employee reports to ' || MANAGER_FNAME || ' ' || MANAGER_LNAME);
ELSE DBMS_OUTPUT.PUT_LINE('No Employee found');
     END IF;
END;

BEGIN
GET_MANAGERS_OF_EMPLOYEES(12);
END;

BEGIN
GET_MANAGERS_OF_EMPLOYEES(10);
END;

--4.3
CREATE OR REPLACE PROCEDURE GET_NAME_AND_COMPANY(CUST_ID IN NUMBER, name_O OUT VARCHAR2, company_O OUT VARCHAR2)
IS
CUST_EXISTS NUMBER;
BEGIN
SELECT COUNT(CUSTOMERID) INTO CUST_EXISTS FROM CUSTOMER WHERE CUST_ID = CUSTOMERID;
IF CUST_EXISTS > 0
THEN SELECT FIRSTNAME || ' ' || LASTNAME INTO name_O FROM CUSTOMER WHERE CUST_ID = CUSTOMERID; 
     SELECT COMPANY INTO company_O FROM CUSTOMER WHERE CUST_ID = CUSTOMERID;
     DBMS_OUTPUT.PUT_LINE('Success!');
ELSE DBMS_OUTPUT.PUT_LINE('Failed!');
name_O := 'none';
company_O := 'none';
END IF;
END;

DECLARE 
R_NAME VARCHAR2(100);
COMPANY VARCHAR2(100);
BEGIN
GET_NAME_AND_COMPANY(200,R_NAME,COMPANY);
DBMS_OUTPUT.put_line('Name: ' || R_NAME || ' Company: ' || COMPANY);
END;

DECLARE 
R_NAME VARCHAR2(100);
COMPANY VARCHAR2(100);
BEGIN
GET_NAME_AND_COMPANY(1,R_NAME,COMPANY);
DBMS_OUTPUT.put_line('Name: ' || R_NAME || ' Company: ' || COMPANY);
END;
-- 5.1

CREATE OR REPLACE PROCEDURE DELETE_INVOICE (INV_ID IN NUMBER)
IS
INVOICE_EXISTS NUMBER;
BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
SELECT COUNT(INVOICEID) INTO INVOICE_EXISTS FROM INVOICE WHERE INV_ID = INVOICEID;
IF INVOICE_EXISTS > 0 THEN 
DELETE FROM INVOICELINE WHERE INVOICELINE.INVOICEID IN (SELECT INVOICE.INVOICEID FROM INVOICE WHERE INV_ID = INVOICE.INVOICEID);
DELETE FROM INVOICE WHERE INV_ID = INVOICEID;
DBMS_OUTPUT.PUT_LINE('INVOICE DELETED!');
ELSE DBMS_OUTPUT.PUT_LINE('Nothing to Delete!');
END IF;
COMMIT;
EXCEPTION WHEN OTHERS THEN
  DBMS_OUTPUT.PUT_LINE('EXCEPTION THROWN');
  ROLLBACK;
END;

BEGIN
DELETE_INVOICE(9999);
END;

BEGIN
DELETE_INVOICE(5);
END;
--5.2
CREATE OR REPLACE PROCEDURE CREATE_CUSTOMER(C_ID IN NUMBER,F_NAME IN VARCHAR2, L_NAME IN VARCHAR2,COMP_NAME IN VARCHAR2, ADDRESS_R IN VARCHAR2, CITY_R IN VARCHAR2,STATE_R IN VARCHAR2, COUNTRY_R IN VARCHAR2, ZIP IN VARCHAR2,PHONE_R IN VARCHAR2,FAX_R IN VARCHAR2,EMAIL_R IN VARCHAR2,SUPPORTER IN NUMBER)
IS
CUSTOMER_EXISTS NUMBER;
BEGIN
SELECT COUNT(CUSTOMERID) INTO CUSTOMER_EXISTS FROM CUSTOMER WHERE CUSTOMERID = C_ID;
IF CUSTOMER_EXISTS = 0
THEN INSERT INTO CUSTOMER VALUES (C_ID,F_NAME,L_NAME,COMP_NAME,ADDRESS_R,CITY_R,STATE_R,COUNTRY_R,ZIP,PHONE_R,FAX_R,EMAIL_R,SUPPORTER);
DBMS_OUTPUT.PUT_LINE('CUSTOMER ADDED');
ELSE DBMS_OUTPUT.PUT_LINE('Customer Exists');
end IF;
COMMIT;
EXCEPTION WHEN OTHERS THEN
  DBMS_OUTPUT.PUT_LINE('EXCEPTION THROWN');
  ROLLBACK;
END;

BEGIN
CREATE_CUSTOMER(1,'Dank','Meme','Revature', '134 SUPERMAN AVE','Marvel','COMIC','BOOK','12345','+1 (123) 456-7890', '098-765-4321', 'worsthero@badcomic.com',4);
END;

BEGIN
CREATE_CUSTOMER(60,'Dank','Meme','Revature', '134 SUPERMAN AVE','Marvel','COMIC','BOOK','12345','+1 (123) 456-7890', '098-765-4321', 'worsthero@badcomic.com',4);
END;

--6.1
CREATE OR REPLACE TRIGGER TR_AFTER_INSERT_EMPLOYEE
AFTER INSERT ON EMPLOYEE
BEGIN
 DBMS_OUTPUT.PUT_LINE('SUCCESSFUL INSERT');
END;

INSERT INTO EMPLOYEE VALUES (17,'Assistant','Dank', 'Meme Assistant', 1,'25-DEC-95','02-MAR-17','157 Secor ave','Bronx', 'NY','USA','10466','+1 (516) 156-9999', '+1 (516) 444-2000','gitgud@dank.com');
--6.2
CREATE OR REPLACE TRIGGER TR_AFTER_UPDATE_ALBUM
AFTER UPDATE ON ALBUM
BEGIN
 DBMS_OUTPUT.PUT_LINE('SUCCESSFUL UPDATE');
END;

UPDATE ALBUM SET TITLE = 'ACE OF DIAMONDS' WHERE ALBUMID = 160;
--6.3
CREATE OR REPLACE TRIGGER TR_AFTER_DELETE_CUSTOMER
AFTER DELETE ON CUSTOMER
BEGIN
 DBMS_OUTPUT.PUT_LINE('SUCCESSFUL DELETE');
END;

DELETE FROM CUSTOMER WHERE CUSTOMERID = 60;

--7.1
SELECT CUSTOMER.FIRSTNAME,CUSTOMER.LASTNAME,INVOICE.INVOICEID FROM CUSTOMER INNER JOIN INVOICE ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;

--7.2
SELECT CUSTOMER.CUSTOMERID,CUSTOMER.FIRSTNAME,CUSTOMER.LASTNAME,INVOICE.INVOICEID,INVOICE.TOTAL FROM CUSTOMER  FULL JOIN INVOICE ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;

--7.3
SELECT ARTIST.NAME,ALBUM.TITLE FROM ALBUM RIGHT JOIN ARTIST ON ARTIST.ARTISTID = ALBUM.ARTISTID;

--7.4
SELECT * FROM ALBUM CROSS JOIN ARTIST ORDER BY ARTIST.NAME;

--7.5
 SELECT E1.FIRSTNAME||' ' || E1.LASTNAME || ' works for '||E2.FIRSTNAME || ' ' || E2.LASTNAME   "Employees and Their Managers"  FROM EMPLOYEE E1, EMPLOYEE E2  WHERE E1.REPORTSTO = E2.EMPLOYEEID;  
 

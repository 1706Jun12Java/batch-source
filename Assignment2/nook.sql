/* 2.1 Select queries */
SELECT * FROM EMPLOYEE;

SELECT * FROM EMPLOYEE WHERE LASTNAME = 'King';

SELECT * FROM EMPLOYEE WHERE FIRSTNAME = 'Andrew' AND REPORTSTO IS NULL;

/* 2.2 Order BY */
SELECT * FROM ALBUM ORDER BY TITLE DESC;

SELECT FIRSTNAME FROM CUSTOMER ORDER BY CITY ASC;

/* 2.3 Insert into */
INSERT INTO GENRE VALUES (26, 'EDM');
INSERT INTO GENRE VALUES (27, 'Techno');

INSERT INTO EMPLOYEE VALUES
  (9, 'Villa', 'John', 'Software Engineer', 6, 1991 - 01 - 19, 2017 - 06 - 05, '199 street-name', 'new york', 'NY',
      'USA', '10010', '347-000-1111', NULL, 'test@email.com');
INSERT INTO EMPLOYEE VALUES
  (10, 'Johnson', 'Zack', 'Software Tester', 6, 1986 - 07 - 21, 2015 - 03 - 11, '299 street-name', 'new york', 'NY',
       'USA', '10010', '123-111-0000', NULL, 'bob@email.com');

INSERT INTO CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME, EMAIL) VALUES (60, 'John', 'Smith', 'test@gmail.com');
INSERT INTO CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME, EMAIL) VALUES (61, 'Bobby', 'Risk', 'kh3@aol.com');

/* 2.4 Update */
UPDATE CUSTOMER SET FIRSTNAME = 'Robert', LASTNAME = 'Walter' WHERE FIRSTNAME = 'Aaron' AND LASTNAME = 'Mitchell';

UPDATE ARTIST SET NAME = 'CCR' WHERE NAME = 'Creedence Clearwater Revival';

/* 2.5 Like */
SELECT * FROM INVOICE WHERE BILLINGADDRESS LIKE 'T%';

/* 2.6 Between */
SELECT * FROM INVOICE WHERE TOTAL BETWEEN 15 AND 50;

SELECT * FROM EMPLOYEE WHERE HIREDATE BETWEEN '1-June-2003' AND '1-March-2004';

/* 2.7 Delete */
ALTER TABLE INVOICE DROP CONSTRAINT FK_INVOICECUSTOMERID;
DELETE FROM CUSTOMER WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walter';


/* 3 SQL function */
/* 3.1 System Define Function */
CREATE FUNCTION getCurrentTime
  RETURN TIMESTAMP
IS b TIMESTAMP;
  BEGIN
    b := current_timestamp();
    RETURN b;
  END;


CREATE OR REPLACE FUNCTION getMediaTypeLength(mediaID IN INTEGER)
  RETURN INTEGER
IS mediaTypeLength INTEGER;
  BEGIN
    SELECT length(NAME)
    INTO mediaTypeLength
    FROM MEDIATYPE
    WHERE MEDIATYPEID = mediaID;
    RETURN mediaTypeLength;
  END;

/* 3.2 System Defined Aggregate Function */

CREATE OR REPLACE FUNCTION InvoiceAvgTotal
  RETURN NUMBER
IS av NUMBER;
  BEGIN
    SELECT AVG(TOTAL)
    INTO av
    FROM INVOICE;
    RETURN av;
  END;

CREATE OR REPLACE FUNCTION mostExpensiveTrack
  RETURN NUMBER
IS price NUMBER;
  BEGIN
    SELECT max(UNITPRICE)
    INTO price
    FROM TRACK;
    RETURN price;
  END;

/* 3.3 USer defined scalar functions */
CREATE OR REPLACE FUNCTION InvoiceLineAvg
  RETURN NUMBER
IS av NUMBER;
  BEGIN
    SELECT AVG(UNITPRICE)
    INTO av
    FROM INVOICELINE;
    RETURN av;
  END;

/* 3.4 user defined table valued functions */
CREATE TYPE MY_TABLE IS OBJECT (FNAME VARCHAR2(100), LNAME VARCHAR2(100));

CREATE TYPE MY_TABLE_COL IS TABLE OF MY_TABLE;

CREATE OR REPLACE FUNCTION YOUNG_EMPLOYEE
  RETURN MY_TABLE_COL PIPELINED IS
  BEGIN
    FOR N IN (SELECT
                LASTNAME,
                FIRSTNAME
              FROM EMPLOYEE
              WHERE BIRTHDATE >= '01-JAN-1968') LOOP
      PIPE ROW (MY_TABLE(N.FIRSTNAME, N.LASTNAME));
    END LOOP;
    RETURN;
  END;


/* 4.1 Basic Stored Procedure */
CREATE OR REPLACE PROCEDURE fullNameList IS
  BEGIN
    SELECT
      FIRSTNAME,
      LASTNAME
    FROM EMPLOYEE;
  END;

/* 5.0 transactions */
CREATE or REPLACE PROCEDURE deleteInvoiceID(id IN NUMBER)
  IS
  BEGIN
    DELETE FROM INVOICELINE WHERE INVOICEID = id;
    DELETE FROM INVOICE WHERE INVOICEID = id;
  END;

CREATE OR REPLACE PROCEDURE insertNewCustomer
  IS
  BEGIN
    INSERT INTO CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME, EMAIL) VALUES (601, 'john', 'doe', 'kh3@aol.com');
  END;

  BEGIN
    insertNewCustomer();
  END;


/* 6.1 After/For */
CREATE OR REPLACE TRIGGER TR_afterInsertEmployee
AFTER INSERT ON EMPLOYEE
  BEGIN
    DBMS_OUTPUT.PUT_LINE('Success');
  END;


CREATE OR REPLACE TRIGGER TR_afterUpdateAlbum
AFTER UPDATE ON ALBUM
  BEGIN
    DBMS_OUTPUT.PUT_LINE('Success');
  END;

CREATE OR REPLACE TRIGGER TR_afterDeleteCustomer
AFTER DELETE ON CUSTOMER
  BEGIN
    DBMS_OUTPUT.PUT_LINE('Success');
  END;

/* 7.1 Inner Join */
SELECT
  FIRSTNAME,
  LASTNAME,
  INVOICEID
FROM CUSTOMER
  JOIN INVOICE ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;

/* 7.2 outer join */
SELECT
  FIRSTNAME,
  LASTNAME,
  INVOICEID
FROM CUSTOMER
  FULL OUTER JOIN INVOICE ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;

/* 7.3 Right Join */
SELECT
  NAME,
  TITLE
FROM ALBUM
  RIGHT JOIN ARTIST ON NAME = TITLE;

/* 7.4 Cross Join */
SELECT *
FROM ARTIST
  CROSS JOIN ALBUM
ORDER BY NAME ASC;

/* 7.5 SELF */
SELECT
  A.FIRSTNAME AS employee,
  B.FIRSTNAME AS reportto
FROM EMPLOYEE A, EMPLOYEE B
WHERE A.REPORTSTO <> b.REPORTSTO;

/* 9 Administration */

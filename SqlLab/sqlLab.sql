/* QUESTION 2 */

-- 2.1
SELECT * FROM EMPLOYEE;
SELECT * FROM EMPLOYEE WHERE LASTNAME='King';
SELECT * FROM EMPLOYEE WHERE FIRSTNAME='Andrew' AND REPORTSTO is NULL;


-- 2.2
SELECT * FROM ALBUM ORDER BY TITLE DESC;
SELECT FIRSTNAME FROM CUSTOMER ORDER BY CITY ASC;


--2.3
--  insert for genre

INSERT INTO GENRE (GENREID, NAME) VALUES(100, 'GENRE100');
INSERT INTO GENRE (GENREID, NAME) VALUES(120, 'GENRE120');


-- insert for employee
INSERT INTO EMPLOYEE
(EMPLOYEEID, LASTNAME, FIRSTNAME, TITLE, REPORTSTO, BIRTHDATE, HIREDATE, ADDRESS, CITY, STATE, COUNTRY, POSTALCODE, PHONE, FAX,EMAIL)
VALUES
(28, 'DC', 'MILK', 'CEO', 1, '01-APR-02', '01-MAY-02', '825 8 Ave SW', 'Calgary', 'NY','US','T2P 2T3','+1 (403) 262-3443','+1 (403) 262-3322', 'nancy@chinookcorp.com');

INSERT INTO EMPLOYEE
(EMPLOYEEID, LASTNAME, FIRSTNAME, TITLE, REPORTSTO, BIRTHDATE, HIREDATE, ADDRESS, CITY, STATE, COUNTRY, POSTALCODE, PHONE, FAX,EMAIL)
VALUES
(30, 'CD', 'JAY', 'GARBAGE COLLECTOR', 1, '01-APR-03', '25-MAY-02', '825 8 Ave SW', 'Calgary', 'NY','US','T2P 2T3','+1 (403) 262-3443','+1 (403) 262-3322', 'nancymilk@chinookcorp.com');


-- insert for customer

INSERT INTO CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME, COMPANY, ADDRESS, CITY, STATE, COUNTRY, POSTALCODE, PHONE, FAX, EMAIL, SUPPORTREPID)
VALUES
(100, 'JACKIE', 'CHEN', 'REVATURE', '1234 7AVE', 'NY', 'NY', 'US', '100031', '+1 (514) 721-4711', '','hholy@gmail.com','2');

INSERT INTO CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME, COMPANY, ADDRESS, CITY, STATE, COUNTRY, POSTALCODE, PHONE, FAX, EMAIL, SUPPORTREPID)
VALUES
(101, 'BRUCE', 'LEE', 'REVATURE', '1234 7AVE', 'NY', 'NY', 'US', '100031', '+1 (514) 721-4711', '','hholy@gmail.com','2');


--2.4
UPDATE CUSTOMER SET FIRSTNAME='Robert',LASTNAME='Walter' WHERE FIRSTNAME='Aaron' AND LASTNAME='Mitchell';
UPDATE ARTIST SET NAME='CCR' WHERE NAME='Creedence Clearwater Revival';


--2.5
SELECT * FROM INVOICE WHERE BILLINGADDRESS LIKE 'T%';


--2.6
SELECT * FROM INVOICE WHERE TOTAL>= 15 AND TOTAL<=50;
SELECT * FROM EMPLOYEE WHERE HIREDATE>='01-JUNE-03' AND HIREDATE<='01-MAR-04';


--2.7
ALTER TABLE INVOICE DROP CONSTRAINT FK_INVOICECUSTOMERID;
DELETE FROM CUSTOMER WHERE FIRSTNAME='Robert' AND LASTNAME='Walter';
ALTER TABLE INVOICE ADD CONSTRAINT FK_INVOICECUSTOMERID
    FOREIGN KEY (CUSTOMERID) REFERENCES CUSTOMER (CUSTOMERID) ON DELETE CASCADE;

--INSERT INTO Customer (CustomerId, FirstName, LastName, Address, City, State, Country, PostalCode, Phone, Email, SupportRepId) VALUES (32, 'Aaron', 'Mitchell', '696 Osborne Street', 'Winnipeg', 'MB', 'Canada', 'R3L 2B9', '+1 (204) 452-6452', 'aaronmitchell@yahoo.ca', 4);
--UPDATE CUSTOMER SET FIRSTNAME='Robert',LASTNAME='Walter' WHERE FIRSTNAME='Aaron' AND LASTNAME='Mitchell';
--ALTER TABLE Invoice ADD CONSTRAINT FK_InvoiceCustomerId
--    FOREIGN KEY (CustomerId) REFERENCES Customer (CustomerId)  ;


--3.1
--TIME FUNCTION
CREATE OR REPLACE FUNCTION GET_TIME RETURN TIMESTAMP
IS
BEGIN
    RETURN CURRENT_TIMESTAMP;
END;

BEGIN
DBMS_OUTPUT.PUT_LINE(GET_TIME());
END;

--GET LENGTH OF NAME
CREATE OR REPLACE
FUNCTION GET_LENGTH (M_ID in NUMBER) RETURN NUMBER
IS
NAME_LEN number;
BEGIN
    SELECT LENGTH(NAME) INTO NAME_LEN FROM MEDIATYPE WHERE MEDIATYPEID=M_ID;
    RETURN NAME_LEN;
END;
--TEST
DECLARE
LEN NUMBER;
BEGIN
LEN:=GET_LENGTH(2);
DBMS_OUTPUT.PUT_LINE(LEN);
END;


--3.2
--AVERAGE TOTAL OF INVOICES
CREATE OR REPLACE FUNCTION TOTAL_AVERAGE
RETURN NUMBER
IS
AVG_TOTAL NUMBER;
BEGIN
SELECT AVG(TOTAL) INTO AVG_TOTAL FROM INVOICE;
RETURN AVG_TOTAL;
END;

--TEST
DECLARE
A_TOTAL NUMBER;
BEGIN
A_TOTAL:=TOTAL_AVERAGE();
DBMS_OUTPUT.PUT_LINE(A_TOTAL);
END;

--MOST EXPENSIVE TRACK
CREATE OR REPLACE FUNCTION MAX_PRICE
RETURN NUMBER
IS
M_PRICE NUMBER;
BEGIN
SELECT MAX(UNITPRICE) INTO M_PRICE FROM TRACK;
RETURN M_PRICE;
END;

--TEST
DECLARE
PRICE NUMBER;
BEGIN
PRICE:=MAX_PRICE();
DBMS_OUTPUT.PUT_LINE(PRICE);
END;


--3.3
CREATE OR REPLACE FUNCTION AVG_PRICE
RETURN NUMBER
IS
M_PRICE NUMBER;
BEGIN
SELECT SUM(UNITPRICE*QUANTITY)/SUM(QUANTITY) INTO M_PRICE FROM INVOICELINE;
RETURN M_PRICE;
END;

--TEST
DECLARE
PRICE2 NUMBER;
BEGIN
PRICE2:=AVG_PRICE();
DBMS_OUTPUT.PUT_LINE(PRICE2);
END;


--3.4
CREATE OR REPLACE FUNCTION EMPLOYEE_AFTER_68 (S OUT SYS_REFCURSOR)
RETURN SYS_REFCURSOR
IS
BEGIN
    OPEN S FOR
    SELECT FIRSTNAME,LASTNAME FROM EMPLOYEE WHERE BIRTHDATE>='01-JAN-1968';
    RETURN S;
END;

--TEST
DECLARE
S SYS_REFCURSOR;
F VARCHAR2(100);
L VARCHAR2(100);
BEGIN
S := EMPLOYEE_AFTER_68;
  DBMS_OUTPUT.PUT_LINE('EMPLOYEES BORN AFTER 1986 ARE');
  LOOP
    FETCH S INTO F,L;
    EXIT WHEN S%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE(F || ' ' ||L);
  END LOOP;
  CLOSE S;
END;


--4.1
CREATE OR REPLACE PROCEDURE GET_EMPLOYEE_NAMES (S OUT SYS_REFCURSOR)
IS
BEGIN
  OPEN S FOR
  SELECT FIRSTNAME, LASTNAME FROM EMPLOYEE;
END;


--4.2
--UPDATE PERSONAL INFO
CREATE OR REPLACE PROCEDURE UPDATE_PERSONAL_INFO
(EM_ID IN NUMBER, NEW_ADDRESS IN VARCHAR2, NEW_CITY IN VARCHAR2, NEW_STATE IN VARCHAR2, NEW_COUNTRY IN VARCHAR, NEW_POSTALCODE IN VARCHAR2, NEW_EMAIL IN VARCHAR2)
IS
BEGIN
  UPDATE EMPLOYEE
  SET
  ADDRESS = NEW_ADDRESS,
  CITY = NEW_CITY,
  STATE = NEW_STATE,
  COUNTRY = NEW_COUNTRY,
  POSTALCODE = NEW_POSTALCODE,
  EMAIL = NEW_EMAIL
  WHERE EMPLOYEEID = EM_ID;
  COMMIT;
END;

BEGIN
UPDATE_PERSONAL_INFO(3,'123 6TH STREET','BROOKLYN','NY','US','11204', '124@GMAIL.COM');
END;

--GET MANAGER
CREATE OR REPLACE PROCEDURE GET_MANAGERS(EM_ID IN NUMBER)
IS
FNAME VARCHAR2(100);
LNAME VARCHAR2(100);

BEGIN
SELECT FIRSTNAME,LASTNAME INTO FNAME,LNAME FROM EMPLOYEE WHERE EMPLOYEEID=(SELECT REPORTSTO FROM EMPLOYEE WHERE EMPLOYEEID=EM_ID);
DBMS_OUTPUT.PUT_LINE('MANAGER IS '||FNAME ||' '||LNAME);
END;

BEGIN
GET_MANAGERS(7);
END;


--5.1
CREATE OR REPLACE PROCEDURE REMOVE_INVOICE(IN_ID IN NUMBER)
IS
BEGIN
DELETE FROM INVOICELINE WHERE INVOICEID = IN_ID;
DELETE FROM INVOICE WHERE INVOICEID = IN_ID;
COMMIT;
END;


--5.2
CREATE OR REPLACE PROCEDURE ADD_CUSTOMER(
  CUS IN INTEGER,
  FNAME IN VARCHAR2,
  LNAME IN VARCHAR2,
  COMP IN VARCHAR2,
  ADR IN VARCHAR2,
  CI IN VARCHAR2,
  STA IN VARCHAR2,
  COU IN VARCHAR2,
  POS IN VARCHAR2,
  PHO IN VARCHAR2,
  N_FAX IN VARCHAR2,
  N_EMAIL IN VARCHAR2,
  SUPP IN VARCHAR2
)
IS
BEGIN
INSERT INTO CUSTOMER (CUSTOMERID,FIRSTNAME,LASTNAME,COMPANY,ADDRESS,CITY,STATE,COUNTRY,POSTALCODE,PHONE,FAX,EMAL,SUPPORTREPID)
VALUES
(CUS,FNAME,LNAME,COMP,ADR,CI,STA,COU,POS,PHO,N_FAX,N_EMAIL,SUPP);
END;

--TEST
BEGIN
ADD_CUSTOMER(66,'HAHA','KONG','APPLE','124 WADF ST','NYC','NY','US','111111','1234567890','12345678','XYZ@GMAIL.COM',5);
END;



--6.1
--after insert trigger
CREATE OR REPLACE TRIGGER TR_INSERT_EMPLOYEE AFTER INSERT
ON EMPLOYEE
FOR EACH ROW
BEGIN
DBMS_OUTPUT.PUT_LINE('AFTER INSERT TRIGGER FIRED');
END;



--AFTER UPDATE TRIGGER
CREATE OR REPLACE TRIGGER TR_UPDATE_ALBUM AFTER UPDATE ON ALBUM
FOR EACH ROW
BEGIN
DBMS_OUTPUT.PUT_LINE('AFTER UPDATE TRIGGER FIRED');
END

--AFTER DELETE TRIGGER
CREATE OR REPLACE TRIGGER TR_DELETE_CUSTOMER AFTER DELETE ON CUSTOMER
FOR EACH ROW
BEGIN
DBMS_OUTPUT.PUT_LINE('AFTER DELETE TRIGGER FIRED');
END;


--7.1
SELECT C.FIRSTNAME, C.LASTNAME, I.INVOICEID FROM
CUSTOMER C INNER JOIN INVOICE I
ON C.CUSTOMERID=I.CUSTOMERID;


--7.2
SELECT C.CUSTOMERID, C.FIRSTNAME, C.LASTNAME, I.INVOICEID, I.TOTAL
FROM CUSTOMER C LEFT OUTER JOIN INVOICE I
ON C.CUSTOMERID = I.CUSTOMERID;

--7.3
SELECT ARTIST.NAME, ALBUM.TITLE
FROM ALBUM RIGHT JOIN ARTIST
ON ALBUM.ARTISTID = ARTIST.ARTISTID;

--7.4
SELECT * FROM ALBUM CROSS JOIN ARTIST
ORDER BY ARTIST.NAME ASC;

--7.5
SELECT A.FIRSTNAME||' '|| A.LASTNAME||' REPORTS TO '||B.FIRSTNAME||' '||B.LASTNAME FROM EMPLOYEE A JOIN EMPLOYEE B ON A.REPORTSTO=B.EMPLOYEEID;

--2.1 SELECT 

SELECT * FROM EMPLOYEE;
SELECT * FROM EMPLOYEE WHERE LASTNAME = 'King';
SELECT * FROM EMPLOYEE WHERE FIRSTNAME = 'Andrew' and REPORTSTO IS NULL; 

--2.2 ORDER BY
SELECT * FROM ALBUM ORDER BY TITLE DESC;
SELECT FIRSTNAME, CITY FROM CUSTOMER ORDER BY CITY;

--2.3 INSERT INTO 
INSERT INTO GENRE VALUES(26, 'Country');
INSERT INTO GENRE VALUES(27, 'Christmas');
INSERT INTO EMPLOYEE(EMPLOYEEID, LASTNAME, FIRSTNAME, TITLE) VALUES(9, 'Chris', 'Tim', 'CEO');
INSERT INTO EMPLOYEE(EMPLOYEEID, LASTNAME, FIRSTNAME, TITLE) VALUES(9, 'Kris', 'Kim', 'Contractor');
INSERT INTO CUSTOMER(CUSTOMERID, FIRSTNAME, LASTNAME, EMAIL) VALUES(60, 'Lam', 'Man', '123@456.com');
INSERT INTO CUSTOMER(CUSTOMERID, FIRSTNAME, LASTNAME, EMAIL) VALUES(61, 'Happy', 'Lady', '123@456.com');
/
--2.4 UPDATE
UPDATE CUSTOMER SET FIRSTNAME = 'Robert', LASTNAME = 'Walter' WHERE FIRSTNAME = 'Aaron' AND LASTNAME = 'Mitchell' ;
/
UPDATE ARTIST SET NAME = 'CCR' WHERE NAME = 'Creedence Clearwater Revival';

--2.5 LIKE
SELECT * FROM INVOICE WHERE BILLINGADDRESS LIKE 'T%';

--2.6 BETWEEN
SELECT * FROM INVOICE WHERE TOTAL BETWEEN 15 AND 50;
SELECT * FROM EMPLOYEE WHERE HIREDATE BETWEEN '01-JUN-2003' AND '01-MAR-2004';

--2.7 DELETE
UPDATE INVOICE SET CUSTOMERID = NULL WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walter'; 
/
DELETE FROM CUSTOMER WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walter'; 
/
--3.1 SYSTEM DEFINED FUNCTION
SELECT SYSDATE TODAY_DATE FROM DUAL;
SELECT COUNT(*) TABLE_LENGTH FROM MEDIATYPE;


--3.2 SYSTEM DEFINED AGGREGATE FUNCTION
SELECT AVG(TOTAL) AVERAGE FROM INVOICE;
SELECT TRACK.NAME, UNITPRICE FROM TRACK WHERE UNITPRICE IN (SELECT MAX(UNITPRICE) FROM TRACK);

--3.3 USER DEFINED SCALAR FUNCTIONS
CREATE OR REPLACE FUNCTION AVE_PRICE_INVOICELINE
RETURN NUMBER
IS FT NUMBER;
BEGIN
    SELECT AVG(UNITPRICE) INTO FT FROM INVOICELINE;
    RETURN FT;
END;
/
    
SELECT AVE_PRICE_INVOICELINE FROM DUAL;

--3.4 USER DEFINED TABLE VALUED FUNCTIONS 

CREATE TYPE MY_TABLE_TYPE IS OBJECT
(FIRSTNAME VARCHAR2(100), LASTNAME VARCHAR2(100));
/
CREATE TYPE MY_TABLE_TYPE_COL IS TABLE OF MY_TABLE_TYPE;
/
CREATE OR REPLACE FUNCTION YOUNG_EMPLOYEE 
RETURN MY_TABLE_TYPE_COL PIPELINED IS
BEGIN
  FOR I IN (SELECT LASTNAME, FIRSTNAME FROM EMPLOYEE WHERE BIRTHDATE >= '01-JAN-1968') LOOP
    PIPE ROW(MY_TABLE_TYPE(I.FIRSTNAME,I.LASTNAME));
  END LOOP;
  RETURN;
END;
/ 
SELECT * FROM TABLE(YOUNG_EMPLOYEE); 


--4.1 STORE PROCEDURE
CREATE OR REPLACE PROCEDURE GET_ALL_EMPLOYEE(S OUT SYS_REFCURSOR)
AS 
BEGIN
    OPEN S FOR
    SELECT LASTNAME, FIRSTNAME FROM EMPLOYEE;
END;
/
DECLARE 
S SYS_REFCURSOR;
FIRSTNAME EMPLOYEE.FIRSTNAME%TYPE;
LASTNAME EMPLOYEE.LASTNAME%TYPE;
BEGIN
    GET_ALL_EMPLOYEE(S);
    LOOP
        FETCH S INTO FIRSTNAME, LASTNAME;
        DBMS_OUTPUT.PUT_LINE(FIRSTNAME|| ' '||LASTNAME);
        EXIT WHEN S%NOTFOUND;
        
    END LOOP;
    CLOSE S;
END;


--4.2 STORE PROCEDURE INPUT PARAMETER
CREATE OR REPLACE PROCEDURE UPDATE_NAME (
    EMPLOYEE_ID IN INTEGER,
    LAST_NAME VARCHAR2,
    FIRS_TNAME VARCHAR2
)
IS  
EP INTEGER;
BEGIN
    SELECT COUNT(EMPLOYEEID) INTO EP FROM EMPLOYEE 
    WHERE EMPLOYEEID = EMPLOYEE_ID;
    IF EP > 0 THEN
         UPDATE EMPLOYEE
         SET LASTNAME = LAST_NAME, FIRSTNAME = FIRS_TNAME
         WHERE EMPLOYEE.EMPLOYEEID = EMPLOYEE_ID;
    ELSE 
         DBMS_OUTPUT.PUT_LINE('FAIL TO MAKE A CHANGE');
    END IF;
END;
/

BEGIN 
UPDATE_NAME(1,'TIM','COHN');
END;
/

CREATE OR REPLACE PROCEDURE GET_MANAGER_BY_EMPLOYEEID(
    EMPLOYEE_ID IN INTEGER,
    MANAGER_NAME_S OUT SYS_REFCURSOR
)
IS 
ER INTEGER;
BEGIN
    SELECT COUNT(EMPLOYEEID) INTO ER FROM EMPLOYEE
    WHERE EMPLOYEEID = EMPLOYEE_ID;
    IF ER > 0 THEN
        OPEN MANAGER_NAME_S FOR
        SELECT FIRSTNAME, LASTNAME  FROM EMPLOYEE 
        WHERE EMPLOYEEID = EMPLOYEE_ID;
    ELSE
        DBMS_OUTPUT.PUT_LINE('NO MANAGER');
END IF;
END;
 
--4.3 STORE PROCEDURE OUTPUT PARAMETER
CREATE OR REPLACE PROCEDURE SP_GET_NAME_COMPANY (
    S OUT SYS_REFCURSOR,
    CUSTOMER_ID IN INTEGER
)
IS
BEGIN
    OPEN S FOR
    SELECT FIRSTNAME,LASTNAME,COMPANY FROM CUSTOMER WHERE CUSTOMERID = CUSTOMER_ID;
END;
 
--5.0 TRANSACTION
BEGIN
    DELETE FROM INVOICELINE WHERE INVOICELINEID = INVOICE_ID; 
    DELETE FROM INVOICE WHERE INVOICEID = INVOICE_ID;
END;

/

CREATE OR REPLACE PROCEDURE SP_INSERT_CUSTOMER (CUSTOMER IN INTEGER,
FIRSTNAME IN VARCHAR, LASTNAME IN VARCHAR2, COMPANY IN VARCHAR2,
ADDRESS IN VARCHAR2, CITY IN VARCHAR2, STATE IN VARCHAR2,
COUNTRY IN VARCHAR2, POSTALCODE IN VARCHAR2, PHONE IN VARCHAR2, FAX IN VARCHAR2,
EMAIL IN VARCHAR2, SUPPORTREPID IN INTEGER)
IS
BEGIN
INSERT INTO CUSTOMER VALUES (CUSTOMERID, FIRSTNAME, LASTNAME, COMPANY,
    ADDRESS, CITY, STATE, COUNTRY, POSTALCODE, PHONE, FAX, EMAIL, SUPPORTREPID);
END;

--6.1 AFTER / FOR

CREATE OR REPLACE TRIGGER TR_INSERT_EMPLOYEE
AFTER INSERT ON EMPLOYEE
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('NEW EMPLOYEE ADDED');
END;
/
CREATE OR REPLACE TRIGGER TR_UPDATE_ALBUM
AFTER UPDATE ON ALBUM
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('ALBUM UPDATED');
END;
/

CREATE OR REPLACE TRIGGER TR_DELETE_CUSTOMER
AFTER DELETE ON CUSTOMER
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('CUSTOMER DELETED');
END;

--7.1 INNER
SELECT FIRSTNAME, LASTNAME, INVOICEID
FROM CUSTOMER 
INNER JOIN INVOICE 
ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;

--7.2 OUTER

SELECT FIRSTNAME, LASTNAME, CUSTOMERID, INVOICEID, TOTAL 
FROM CUSTOMER
FULL JOIN INVOICE 
ON CUSTOMER.INVOICEID = INVOICE.CUSTOMERID;

--7.3 RIGHT

SELECT ART.NAME, AL.TITLE 
FROM ARTIST ART
RIGHT JOIN ALBUM AL
ON AL.ALBUMID = ART.ARTISTID;

--7.4 CROSS

SELECT ART.NAME
FROM ARTIST ART
CROSS JOIN ALBUM
ORDER BY ART.NAME;

--7.5 SELF

SELECT A.FIRSTNAME F_EMPLOYEE,A.LASTNAME L_EMPLOYEE, B.FIRSTNAME F_MANAGER, B.LASTNAME L_MANAGER
FROM EMPLOYEE A INNER JOIN EMPLOYEE B
ON A.REPORTSTO = B.EMPLOYEEID;

--9.0 CREATE .bak 



/*SQL LAB HOMEWORK*/
--SECTION 2 SQL QUERIES
--SECTION 2.1 - USING SELECT
--TASK 1
SELECT * FROM EMPLOYEE;
--TASK 2
SELECT * FROM EMPLOYEE WHERE LASTNAME = 'King';
--TASK 3
SELECT * FROM EMPLOYEE WHERE FIRSTNAME = 'Andrew' AND REPORTSTO IS NULL;

--SECTION 2.2 - USING ORDER BY
--TASK 1
SELECT * FROM ALBUM
ORDER BY TITLE DESC;
--TASK 2
SELECT FIRSTNAME FROM CUSTOMER
ORDER BY CITY ASC;

--SECTION 2.3 - USING INSERT
--TASK 1
INSERT INTO GENRE (GENREID,NAME) VALUES (26,'8-bit');
INSERT INTO GENRE (GENREID,NAME) VALUES (27,'Video Game');
--TASK 2
INSERT INTO EMPLOYEE (EMPLOYEEID,LASTNAME,FIRSTNAME,TITLE,REPORTSTO,BIRTHDATE,HIREDATE,ADDRESS,CITY,STATE,COUNTRY,POSTALCODE,PHONE,FAX,EMAIL) VALUES (9,'TheOne','Neo','CEO',3,'25-MAY-1980','18-JUN-2000','1337 Neo street','The Matrix','MX','Zion',NULL,'(101) 010-1010',NULL,'TheOne@matrix.com');
INSERT INTO EMPLOYEE (EMPLOYEEID,LASTNAME,FIRSTNAME,TITLE,REPORTSTO,BIRTHDATE,HIREDATE,ADDRESS,CITY,STATE,COUNTRY,POSTALCODE,PHONE,FAX,EMAIL) VALUES (10,'Dumbledore','Professor','Headmaster',5,'01-JAN-1852','11-JUL-1942','123 Gryffindor Lane','London',NULL,'UK',NULL,'(123) hog-wart',NULL,'Headmaster.Dumbledore@hogwarts.com');
--TASK 3
INSERT INTO CUSTOMER (CUSTOMERID,FIRSTNAME,LASTNAME,COMPANY,ADDRESS,CITY,STATE,COUNTRY,POSTALCODE,PHONE,FAX,EMAIL,SUPPORTREPID) VALUES (60,'Gandolf','TheWhite',NULL,'513 Hobbit Lane','Minas Anor','Kingdom of Gondor','Mordor',NULL,NULL,NULL,'GandolfTheWhite@mordor.com',2);
INSERT INTO CUSTOMER (CUSTOMERID,FIRSTNAME,LASTNAME,COMPANY,ADDRESS,CITY,STATE,COUNTRY,POSTALCODE,PHONE,FAX,EMAIL,SUPPORTREPID) VALUES (61,'Darth','Vader','The Empire','Space',NULL,NULL,NULL,NULL,NULL,NULL,'DarthVaderRulerOfTheGalaxy@TheEmpire.com',3);

--SECTION 2.4 - USING UPDATE
--TASK 1
UPDATE CUSTOMER SET FIRSTNAME = 'Robert' WHERE FIRSTNAME = 'Aaron';
UPDATE CUSTOMER SET LASTNAME = 'Walter' WHERE LASTNAME = 'Mitchell';
--TASK 2
UPDATE ARTIST SET NAME = 'CCR' WHERE NAME = 'Creedence Clearwater Revival';

--SECTION 2.5 USING LIKE
--TASK 1
SELECT * FROM INVOICE WHERE BILLINGADDRESS LIKE 'T%';

--SECTION 2.6 USING BETWEEN
--TASK 1
SELECT * FROM INVOICE WHERE TOTAL BETWEEN 15 AND 50;
--TASK2 
SELECT * FROM EMPLOYEE WHERE HIREDATE BETWEEN '01-JUN-2003' and '01-MAR-2004';

--SECTION 2.7 - USING DELETE
--TASK 1
ALTER TABLE INVOICE
  DROP CONSTRAINT FK_INVOICECUSTOMERID;
DELETE FROM CUSTOMER WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walter';  

--SECTION 3.0 SQL FUNCTIONS
--SECTION 3.1
--TASK 1
CREATE OR REPLACE FUNCTION FIND_TIME
--RETURNING DATATYPE TIMESTAMP TO REPRESENT TIME
RETURN TIMESTAMP IS CTIME TIMESTAMP;
BEGIN
--RETURNING THE LOACLTIMESTAMP FUNCTION INTO CTIME
  SELECT LOCALTIMESTAMP INTO CTIME FROM DUAL;
  RETURN CTIME;
END;

DECLARE
CT TIMESTAMP;
BEGIN
CT := FIND_TIME();
dbms_output.put_line('CURRENT TIME IS: ' || CT); 
END;

--TASK 2
CREATE OR REPLACE FUNCTION FIND_LENGTH_AT_ID (MID IN NUMBER)
--RETURNING NUMBER INSTEAD OF VARCHAR TO CORRESSPOND TO THE ID OF THE MEDIATYPE TABLE
RETURN NUMBER
IS 
X NUMBER;
--CREATED NUMBER X TO PUT THE LENGTH INTO
BEGIN 
--SELECTING THE LENGTH OF MEDIA NAME WHERE MEDIATYPEID MATCHES MNAME
   SELECT LENGTH(NAME)INTO X FROM MEDIATYPE
   WHERE MEDIATYPEID = MID;
   RETURN X;
END;

DECLARE
X NUMBER;
BEGIN 
X := FIND_LENGTH_AT_ID(1);
dbms_output.put_line(X); 
END;

--SECTION 3.2
--TASK 1
CREATE OR REPLACE FUNCTION AVERAGE
RETURN NUMBER
AS
TOTAL NUMBER;
BEGIN
SELECT AVG(TOTAL) INTO TOTAL FROM INVOICE;
RETURN TOTAL;
END;

DECLARE
TOTAL NUMBER;
BEGIN
TOTAL := AVERAGE;
DBMS_OUTPUT.PUT_LINE('The average for TOTAL in INVOICE is: '|| TOTAL);
END;

--TASK 2
CREATE OR REPLACE FUNCTION MAX_AMT
RETURN NUMBER
AS
MAXX NUMBER;
BEGIN
--USE AGGREGATE FUNCTION MAX TO FIND THE MAX VALUE
SELECT MAX(UNITPRICE) INTO MAXX FROM TRACK;
RETURN MAXX;
END;

DECLARE
MAXX NUMBER;
BEGIN
MAXX := MAX_AMT;
DBMS_OUTPUT.PUT_LINE('The highest price for a track in TRACK is: '|| MAXX);
END;

--SECTION 3.3
--TASK 1
CREATE OR REPLACE FUNCTION SCALAR_AVG
RETURN NUMBER
IS
SAVG NUMBER;
BEGIN
--USE AGGREGATE FUNCTION SUM THEN SCALAR FUNCTION / TO GET AVG
SELECT SUM(UNITPRICE) INTO SAVG FROM INVOICELINE;
RETURN SAVG/2240;
END;

DECLARE
AVGG NUMBER;
BEGIN
AVGG := SCALAR_AVG;
DBMS_OUTPUT.PUT_LINE('The average for UNITPRICE in INVOICELINE is: '|| AVGG);
END;
--USED COUNT TO FIND NUMBER TO DIVIDE THE UM BY
--SELECT COUNT(UNITPRICE) FROM INVOICELINE;

-- SECTTION 3.4
CREATE OR REPLACE FUNCTION AFTER1986
RETURN SYS_REFCURSOR 
IS A1986 SYS_REFCURSOR;
BEGIN
    OPEN A1986 FOR
        SELECT * FROM EMPLOYEE WHERE EMPLOYEE.BIRTHDATE > TO_DATE('1986','yyyy');
    RETURN A1986;
END;
/
DECLARE 
S SYS_REFCURSOR;
E EMPLOYEE%ROWTYPE;
BEGIN
S := AFTER1986;
  DBMS_OUTPUT.PUT_LINE('EMPLOYEES BORN AFTER 1986 ARE');
  LOOP
    FETCH S INTO E;
    EXIT WHEN S%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE(E.FIRSTNAME || ' ' ||
                        E.LASTNAME || ' IS BORN AFTER 1986');
  END LOOP;
  CLOSE S;
END;

--SECTION 4 PROCEDURES
--4.1
CREATE OR REPLACE PROCEDURE ALL_NAMES (NM OUT SYS_REFCURSOR)
IS 
BEGIN
OPEN NM FOR
SELECT FIRSTNAME, LASTNAME  FROM EMPLOYEE;
END;

DECLARE 
NM SYS_REFCURSOR;
F_NAME EMPLOYEE.FIRSTNAME%TYPE;
L_NAME EMPLOYEE.LASTNAME%TYPE;
BEGIN
ALL_NAMES(NM);
  LOOP
    FETCH NM INTO F_NAME,L_NAME;
    EXIT WHEN NM%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE(F_NAME||' IS FIRSTNAME, '||L_NAME||' IS LAST NAME');
  END LOOP;
  CLOSE NM;
END;

--SECTION 4.2
--TASK 1
CREATE OR REPLACE PROCEDURE UPDATE_INFO (E_ID IN INTEGER,
NEWL_NAME VARCHAR2,
NEWF_NAME VARCHAR2,
NEW_TITLE VARCHAR2,
NEW_REPORT NUMBER,
NEWB_DAY DATE,
NEWH_DAY DATE,
NEWA_DRESS VARCHAR2,
NEW_CITY VARCHAR2,
NEW_STATE VARCHAR2,
NEW_COUNTRY VARCHAR2,
NEWP_CODE VARCHAR2,
NEW_PHONE VARCHAR2,
NEW_FAX VARCHAR2,
NEWE_MAIL VARCHAR2)
IS 
EP INTEGER;
BEGIN
 SELECT COUNT(EMP.EMPLOYEEID) INTO EP FROM EMPLOYEE EMP
 WHERE EMP.EMPLOYEEID = E_ID;
 IF EP > 0 THEN
 UPDATE EMPLOYEE
 SET LASTNAME = NEWL_NAME
 WHERE EMPLOYEE.EMPLOYEEID = E_ID;
  UPDATE EMPLOYEE
 SET FIRSTNAME = NEWF_NAME
 WHERE EMPLOYEE.EMPLOYEEID = E_ID;
  UPDATE EMPLOYEE
 SET TITLE = NEW_TITLE
 WHERE EMPLOYEE.EMPLOYEEID = E_ID;
  UPDATE EMPLOYEE
 SET REPORTSTO = NEW_REPORT
 WHERE EMPLOYEE.EMPLOYEEID = E_ID;
  UPDATE EMPLOYEE
 SET BIRTHDATE = NEWB_DAY
 WHERE EMPLOYEE.EMPLOYEEID = E_ID;
  UPDATE EMPLOYEE
 SET HIREDATE = NEWH_DAY
 WHERE EMPLOYEE.EMPLOYEEID = E_ID;
  UPDATE EMPLOYEE
 SET ADDRESS = NEWA_DRESS
 WHERE EMPLOYEE.EMPLOYEEID = E_ID;
  UPDATE EMPLOYEE
 SET CITY = NEW_CITY
 WHERE EMPLOYEE.EMPLOYEEID = E_ID;
  UPDATE EMPLOYEE
 SET STATE = NEW_STATE
 WHERE EMPLOYEE.EMPLOYEEID = E_ID;
  UPDATE EMPLOYEE
 SET COUNTRY = NEW_COUNTRY
 WHERE EMPLOYEE.EMPLOYEEID = E_ID;
  UPDATE EMPLOYEE
 SET POSTALCODE = NEWP_CODE
 WHERE EMPLOYEE.EMPLOYEEID = E_ID;
  UPDATE EMPLOYEE
 SET PHONE = NEW_PHONE
 WHERE EMPLOYEE.EMPLOYEEID = E_ID;
  UPDATE EMPLOYEE
 SET FAX = NEW_FAX
 WHERE EMPLOYEE.EMPLOYEEID = E_ID;
 UPDATE EMPLOYEE
 SET EMAIL = NEWE_MAIL
 WHERE EMPLOYEE.EMPLOYEEID = E_ID;
 ELSE 
 DBMS_OUTPUT.PUT_LINE('FAILED TO CHANGE EMAIL');
 END IF;
 END;
 
 BEGIN 
 UPDATE_INFO(8,'LOL','WHY',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'THISTOOKFOREVER@GMAIL.COM');
 END;

--TASK 2
CREATE OR REPLACE PROCEDURE MANAGERS(E_ID IN INTEGER, MA OUT SYS_REFCURSOR)
IS 
ER INTEGER;
BEGIN
SELECT COUNT(EMPLOYEE.EMPLOYEEID) INTO ER FROM EMPLOYEE
WHERE EMPLOYEE.EMPLOYEEID = E_ID;
IF ER > 0 THEN
OPEN MA FOR
SELECT EMP1.FIRSTNAME, EMP1.LASTNAME  FROM EMPLOYEE EMP1
WHERE EMP1.EMPLOYEEID = (SELECT EMP2.REPORTSTO FROM EMPLOYEE EMP2 WHERE EMP2.EMPLOYEEID = E_ID);
ELSE
DBMS_OUTPUT.PUT_LINE('FAILED TO FIND MANAGER');
END IF;
END;

DECLARE 
MA SYS_REFCURSOR;
FIRSTNAME EMPLOYEE.FIRSTNAME%TYPE;
LASTNAME EMPLOYEE.LASTNAME%TYPE;
BEGIN
MANAGERS(6,MA);
  LOOP
    FETCH MA INTO FIRSTNAME,LASTNAME;
    EXIT WHEN MA%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE('YOUR MANAGER IS: '||FIRSTNAME || ' ' || LASTNAME);
  END LOOP;
  CLOSE MA;
END;

--SECTION 4.3
CREATE OR REPLACE PROCEDURE NAME_COMPANY (NC OUT SYS_REFCURSOR)
IS
BEGIN
OPEN NC FOR
SELECT FIRSTNAME,LASTNAME,COMPANY FROM CUSTOMER;
END;

DECLARE 
NC SYS_REFCURSOR;
FIRSTNAME CUSTOMER.FIRSTNAME%TYPE;
LASTNAME CUSTOMER.LASTNAME%TYPE;
COMPANY CUSTOMER.COMPANY%TYPE;
BEGIN
NAME_COMPANY(NC);
  LOOP
    FETCH NC INTO FIRSTNAME,LASTNAME,COMPANY;
    EXIT WHEN NC%NOTFOUND;
    IF COMPANY IS NULL THEN COMPANY := 'NO COMPANY';
    END IF;
    DBMS_OUTPUT.PUT_LINE(FIRSTNAME||' '||LASTNAME||' WORKS FOR ' || COMPANY);
  END LOOP;
  CLOSE NC;
END; 

--SECTION 5 TRANSACTIONS
--TASK 1
CREATE OR REPLACE PROCEDURE REMOVE (IN_ID IN NUMBER)
IS
BEGIN
IF IN_ID >0  THEN
DELETE FROM INVOICELINE WHERE IN_ID = INVOICEID;
DELETE FROM INVOICE WHERE IN_ID = INVOICEID;
END IF;
END;

BEGIN
REMOVE(1);
END;

--TASK 2
CREATE OR REPLACE PROCEDURE FILL (
N_CUSTOMER IN INTEGER,
N_FIRSTNAME IN VARCHAR2,
N_LASTNAME IN VARCHAR2,
N_COMPANY IN VARCHAR2,
N_ADDRESS IN VARCHAR2,
N_CITY IN VARCHAR2,
N_STATE IN VARCHAR2,
N_COUNTRY IN VARCHAR2,
N_POSTALCODE IN VARCHAR2,
N_PHONE IN VARCHAR2,
N_FAX IN VARCHAR2,
N_EMAIL IN VARCHAR2,
N_SUPPORTREPID IN INTEGER)
IS
BEGIN
INSERT INTO CUSTOMER VALUES (N_CUSTOMER,
N_FIRSTNAME,
N_LASTNAME,
N_COMPANY,
N_ADDRESS,
N_CITY,
N_STATE,
N_COUNTRY,
N_POSTALCODE,
N_PHONE,
N_FAX,
N_EMAIL,
N_SUPPORTREPID);
END;

BEGIN
FILL(60,'BOB','SMITH','MEME',NULL,'MEME CITY','MC','UNITED MEMES',NULL,'(123) 456-7890',NULL,'MEMES@MEMES.COM',6);
END;

--SECTION 6 TRIGGERS
--SECTION 6.1
--TASK 1
CREATE OR REPLACE TRIGGER TR_INSERT_EMPLOYEE
AFTER INSERT ON EMPLOYEE
FOR EACH ROW
BEGIN
DBMS_OUTPUT.PUT_LINE('NEW EMPLOYEE WAS ADDED AT: ' || LOCALTIMESTAMP);
END;
INSERT INTO EMPLOYEE VALUES (9,'KOOL','GUY',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL);

--TASK 2
CREATE OR REPLACE TRIGGER TR_UPDATE_ALBUM
AFTER UPDATE ON ALBUM
FOR EACH ROW
BEGIN
DBMS_OUTPUT.PUT_LINE('ALBUM WAS UPDATED AT: ' || LOCALTIMESTAMP);
END;


--TASK 3
CREATE OR REPLACE TRIGGER TR_DELETE_CUSTOMER
AFTER DELETE ON CUSTOMER
FOR EACH ROW
BEGIN
DBMS_OUTPUT.PUT_LINE('CUSTOMER WAS DELETED AT: ' || LOCALTIMESTAMP);
END;

--SECTION 7
--SECTION 7.1 - INNER JOIN
SELECT CUS.FIRSTNAME,CUS.LASTNAME, INV.INVOICEID
FROM CUSTOMER CUS
INNER JOIN INVOICE INV
ON INV.CUSTOMERID = CUS.CUSTOMERID;

--SECTION 7.2 - OUTER JOIN
SELECT CUS.FIRSTNAME, CUS.LASTNAME, CUS.CUSTOMERID,INV.INVOICEID, INV.TOTAL 
FROM CUSTOMER CUS
FULL OUTER JOIN INVOICE INV
ON INV.INVOICEID = CUS.CUSTOMERID;

--SECTION 7.3 - RIGHT JOIN
SELECT ART.NAME, AL.TITLE 
FROM ARTIST ART
RIGHT JOIN ALBUM AL
ON AL.ALBUMID = ART.ARTISTID;

--SECTION 7.4 - CROSS JOIN
SELECT ART.NAME
FROM ARTIST ART
CROSS JOIN ALBUM
ORDER BY ART.NAME;

--7.5 - SELF JOIN
SELECT A.FIRSTNAME,A.LASTNAME||'   REPORTS TO   '|| B.FIRSTNAME,B.LASTNAME
FROM EMPLOYEE A, EMPLOYEE B
WHERE A.REPORTSTO = B.EMPLOYEEID;

--SECTION 9
--create backup